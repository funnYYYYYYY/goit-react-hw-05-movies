{"version":3,"file":"static/js/801.b804760e.chunk.js","mappings":"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","sources":["components/Details.jsx","pages/MovieDetails.jsx","services/api.js"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport { getDetailsAboutFilms } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport styled from 'styled-components';\n\nconst List = styled.ul`\n  list-style: none;\n  display: flex;\n  gap: 10px;\n`;\n\nexport const Details = () => {\n  const [genres, setGenres] = useState([]);\n\n  const { movieId } = useParams();\n  useEffect(() => {\n    getDetailsAboutFilms(movieId).then(setGenres);\n  }, [movieId]);\n\n  return (\n    <List>\n      {genres.map(({ id, name }) => (\n        <li key={id}>{name}</li>\n      ))}\n    </List>\n  );\n};\n","// import { Suspense } from 'react';\nimport { useState, useEffect } from 'react';\nimport { getFilmsById } from 'services/api';\nimport { useParams } from 'react-router-dom';\nimport { Outlet, NavLink, useNavigate, useLocation } from 'react-router-dom';\n\nimport styled from 'styled-components';\nimport { Details } from 'components/Details';\n\nconst Container = styled.div`\n  width: 1280px;\n  padding: 52px 24px;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nconst Text = styled.h2`\n  font-size: 15px;\n  font-family: Roboto, sans-serif;\n  font-weight: 700;\n  color: black;\n`;\n\nconst Img = styled.img`\n  border-radius: 5px;\n  width: 395px;\n  height: 575px;\n  transition-property: scale;\n  transition-duration: 250ms;\n  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n  transition: all 1s ease-out;\n  cursor: pointer;\n`;\n\nconst Link = styled(NavLink)`\n  font-size: 20px;\n  display: block;\n  margin-bottom: 12 px;\n  overflow: hidden;\n  list-style: none;\n  text-decoration: none;\n  padding: 0;\n  margin: 0;\n`;\n\nconst ListDescription = styled.ul`\n  list-style: none;\n  font-weight: 700;\n  color: red;\n`;\n\nconst Description = styled.span`\n  font-size: 15px;\n  color: green;\n  font-weight: 500;\n`;\n\nconst BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst fakeUrl =\n  'https://yt3.ggpht.com/AAKF_677TIvjFz_9xFF0R6PgiVd0kRpEtY6APSxSDRP65nXg8hkn9NFsz2bRd9_Z37DJ9D_b=s900-c-k-c0x00ffffff-no-rj';\n\nconst MovieDetails = () => {\n  const [details, setDetails] = useState(null);\n\n  const navigate = useNavigate();\n  const location = useLocation();\n\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getFilmsById(movieId).then(setDetails);\n  }, [movieId]);\n\n  if (!details) {\n    return;\n  }\n  console.log('details', details);\n\n  const handleGoBack = () => {\n    navigate(location.state.from);\n  };\n\n  return (\n    <Container>\n      <button type=\"button\" onClick={handleGoBack}>\n        Go back\n      </button>\n\n      <Text>{details.title}</Text>\n      {details.poster_path ? (\n        <Img\n          src={`${BASE_IMG_URL + details.poster_path}`}\n          alt={details.title}\n        />\n      ) : (\n        <Img src={`${fakeUrl}`} alt=\"Oops... An error occurred\" />\n      )}\n      <ListDescription>\n        <li>\n          Release date:\n          <Description>{details.release_date}</Description>\n        </li>\n        <li>\n          Rating:\n          <Description>{details.vote_average}</Description>\n        </li>\n        <li>\n          Overview:\n          <Description>{details.overview}</Description>\n        </li>\n\n        <li>\n          Popularity:\n          <Description>{details.popularity}</Description>\n        </li>\n\n        <li>\n          Genres:\n          <Description>\n            <Details />\n          </Description>\n        </li>\n      </ListDescription>\n\n      <Link to=\"cast\" state={location.state}>\n        Cast\n      </Link>\n      <Link to=\"reviews\" state={location.state}>\n        Reviews\n      </Link>\n\n      {/* <Suspense>\n        <Outlet />\n      </Suspense> */}\n      <Outlet />\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '1597a1507afef30e38994154d5f0aaa9';\n\n// Популярні фільми які відображені на головній сторінці\n\nexport const getPopularFilms = async () => {\n  const {\n    data: { results },\n  } = await axios.get(`/trending/movie/day?api_key=${API_KEY}`);\n  console.log(results);\n  return results;\n};\n\n// Пошук фільмів по їх id\n\nexport const getFilmsById = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}?api_key=${API_KEY}&language=en-US`\n  );\n\n  return data;\n};\n\n// Пошук фільмів по назві\n\nexport const getFilmsByQuery = async query => {\n  const {\n    data: { results },\n  } = await axios.get(\n    `/search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n\n  return results;\n};\n\n// Відображення відгуків фільму\n\nexport const getFilmsDisplayMovieReviews = async id => {\n  const { data } = await axios.get(\n    `/movie/${id}/reviews?api_key=${API_KEY}&language=en-US&page=1`\n  );\n\n  return data.results;\n};\n\n// Відображення акторського складу\n\nexport const getFilmsCastReflection = async id => {\n  const { data } = await axios.get(\n    `movie/${id}/credits?api_key=${API_KEY}&language=en-US`\n  );\n  return data.cast;\n};\n\n//Відображення повної інформації про фільм\n\nexport const getDetailsAboutFilms = async id => {\n  const {\n    data: { genres },\n  } = await axios.get(`/movie/${id}?api_key=${API_KEY}`);\n\n  return genres;\n};\n"],"names":["List","styled","Details","useState","genres","setGenres","movieId","useParams","useEffect","getDetailsAboutFilms","then","map","id","name","Container","Text","Img","Link","NavLink","ListDescription","Description","details","setDetails","navigate","useNavigate","location","useLocation","getFilmsById","console","log","type","onClick","state","from","title","poster_path","src","alt","release_date","vote_average","overview","popularity","to","axios","API_KEY","getPopularFilms","results","data","getFilmsByQuery","query","getFilmsDisplayMovieReviews","getFilmsCastReflection","cast"],"sourceRoot":""}